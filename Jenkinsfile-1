

pipeline {
    agent any
    environment {
        GIT_COMMIT_SHORT = sh(
            script: "printf \$(git rev-parse --short ${GIT_COMMIT})",
            returnStdout: true
        )
    }
    tools {
        maven 'Maven'
        jdk 'jdk-1.8'
    }
    stages {
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('SonarQube analysis') {
            environment {
                scannerHome = tool 'Sonar-scanner'
            }
            steps {
               withSonarQubeEnv(credentialsId: 'sq-token', installationName:'sq-server') {
                    sh "${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=sq-inner \
                        -Dsonar.projectName=sq-inner \
                        -Dsonar.projectVersion=${env.GIT_COMMIT_SHORT} \
                        -Dsonar.sources=."
                }
            }
        }
       stage('SQuality Gate') {
         steps {
           timeout(time: 1, unit: 'MINUTES') {
           waitForQualityGate abortPipeline: true
        }
   }
    }
    }
}
